library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Pong is
    Port (
clk : in STD_LOGIC;
hsync_out : out STD_LOGIC;
vsync_out : out STD_LOGIC;
red_out : out STD_LOGIC;
green_out : out STD_LOGIC;
blue_out : out STD_LOGIC;
entreeG : in  STD_LOGIC_VECTOR (1 downto 0); -- touches gauches en entree
entreeD : in  STD_LOGIC_VECTOR (1 downto 0) -- touches droites en entree
);
end Pong;

architecture Behavioral of Pong is

signal halfClock : STD_LOGIC;
signal horizontalPosition : integer range 0 to 800 := 0;
signal verticalPosition : integer range 0 to 521 := 0;
signal hsyncEnable : STD_LOGIC;
signal vsyncEnable : STD_LOGIC;

signal photonX : integer range 0 to 640 := 0;
signal photonY : integer range 0 to 480 := 0;

constant leftPaddleX : integer := 25;
signal leftPaddleY : integer range 0 to 480 := 240;
constant rightPaddleX : integer := 615;
signal rightPaddleY : integer range 0 to 480 := 240;
signal rightPaddleDirection : integer := 0;
signal leftPaddleDirection : integer := 0;

signal paddleHalfHeight : integer range 0 to 50 := 30;
constant paddleHalfWidth : integer := 6;

constant leftPaddleBackX : integer := leftPaddleX-paddleHalfWidth;
constant leftPaddleFrontX : integer := leftPaddleX+paddleHalfWidth;
constant rightPaddleFrontX : integer := rightPaddleX-paddleHalfWidth;
constant rightPaddleBackX : integer := rightPaddleX+paddleHalfWidth;
constant paddleBottomLimit : integer := 474;
constant paddleTopLimit : integer := 4;

signal color : STD_LOGIC_VECTOR (2 downto 0) := "000";

signal ballMovementClockCounter : integer range 0 to 1000000 := 0;
signal ballMovementClock : STD_LOGIC := '0';
signal paddleMovementClockCounter : integer range 0 to 1000000 := 0;
signal paddleMovementClock : STD_LOGIC := '0';

constant ballMaxSpeed : integer := 8;
signal ballX : integer range -100 to 640 := 320;
signal ballY : integer range -100 to 480 := 240;
signal ballSpeedX : integer range -100 to 100 := 1;
signal ballSpeedY : integer range -100 to 100 := 1;

constant maxLeftLifes : integer := 5;
constant maxRightLifes : integer := 5;

signal leftLifes : integer range 0 to 5 := maxLeftLifes;
signal rightLifes : integer range 0 to 5 := maxRightLifes;
signal gameOver : STD_LOGIC := '0';

constant leftLifePosition : integer := 179;
constant rightLifePosition : integer := 359;
constant lifeBarWidth : integer := 100;
constant lifeBarHeight : integer := 3;

signal resetBall : STD_LOGIC := '0';
signal resetCounter : integer range 0 to 101 := 0;


begin

-- Half the clock
clockScaler : process(clk)
begin
			if clk'event and clk = '1' then
			halfClock <= not halfClock;
			end if;
end process clockScaler;

ballMovementClockScaler : process(clk)
begin
			if clk'event and clk = '1' then
			ballMovementClockCounter <= ballMovementClockCounter + 1;

				if (ballMovementClockCounter = 500000) then
				ballMovementClock <= not ballMovementClock;
				ballMovementClockCounter <= 0;
				end if;
			end if;
end process ballMovementClockScaler;

paddleMovementClockScaler : process(clk)
begin
			if clk'event and clk = '1' then
			paddleMovementClockCounter <= paddleMovementClockCounter + 1;

				if (paddleMovementClockCounter = 100000) then
				paddleMovementClock <= not paddleMovementClock;
				paddleMovementClockCounter <= 0;
				end if;
			end if;
end process paddleMovementClockScaler;

signalTiming : process(halfClock)
begin
				if halfClock'event and halfClock = '1' then
					if horizontalPosition = 800 then
					horizontalPosition <= 0;
					verticalPosition <= verticalPosition + 1;

					if verticalPosition = 521 then
						verticalPosition <= 0;
						else
						verticalPosition <= verticalPosition + 1;
					end if;
					else
						horizontalPosition <= horizontalPosition + 1;
					end if;
				end if;
end process signalTiming;

vgaSync : process(halfClock, horizontalPosition, verticalPosition)
begin
				if halfClock'event and halfClock = '1' then
					if horizontalPosition > 0 and horizontalPosition < 97 then
						hsyncEnable <= '0';
						else
						hsyncEnable <= '1';
					end if;

					if verticalPosition > 0 and verticalPosition < 3 then
						vsyncEnable <= '0';
						else
						vsyncEnable <= '1';
					end if;
				end if;
end process vgaSync;

coordinates : process(horizontalPosition, verticalPosition)
begin
					photonX <= horizontalPosition - 144;
					photonY <= verticalPosition - 31;
end process coordinates;

finishGame : process(leftLifes, rightLifes)
begin
					if leftLifes = 0 or rightLifes = 0 then
						gameOver <= '0';
					end if;

end process finishGame;

colorSetter : process(photonX, photonY, halfClock)
begin
-- Paddle handling
					if ((photonX >= leftPaddleBackX) and (photonX <= leftPaddleFrontX)
					and (photonY >= leftPaddleY - paddleHalfHeight) and (photonY <= leftPaddleY + paddleHalfHeight)) or
					((photonX >= rightPaddleFrontX) and (photonX <= rightPaddleBackX)
					and (photonY >= rightPaddleY - paddleHalfHeight) and (photonY <= rightPaddleY + paddleHalfHeight)) then
					color <= "111";
					-- Dashed Line
					elsif (photonX = 319 and photonY mod 16 <= 10) then
					color <= "111";

					-- Ball
					elsif (photonY >= ballY - 2 and photonY <= ballY + 2) and (photonX >= ballX - 2 and photonX <= ballX + 2) then
					color <= "111";
					elsif (photonY >= ballY - 3 and photonY <= ballY + 3) and (photonX >= ballX - 1 and photonX <= ballX + 1) then
					color <= "111";
					elsif (photonY >= ballY - 1 and photonY <= ballY + 1) and (photonX >= ballX - 3 and photonX <= ballX + 3) then
					color <= "111";

					-- green lifebar
					elsif (photonX>=leftLifePosition and photonX<leftLifePosition+(leftLifes*20) and photonY>=30 and photonY<=30+lifeBarHeight) or
					(photonX>=rightLifePosition and photonX<rightLifePosition+(rightLifes*20) and photonY>=30 and photonY<=30+lifeBarHeight) then
					color <= "010";

					-- red lifebar

					elsif (photonX >= (leftLifePosition+(leftLifes*20)) and photonX <= (leftLifePosition+(20*maxLeftLifes)) and photonY>=30 and photonY<=(30+lifeBarHeight)) or
					(photonX>=(rightLifePosition+(rightLifes*20)) and photonX<= (rightLifePosition+(20*maxRightLifes)) and photonY>=30 and photonY<=(30+lifeBarHeight)) then
					color <= "100";

					-- background
					else
					color <= "000";
					end if;
end process colorSetter;

leftPaddleMovement : process(paddleMovementClock)
begin
					if paddleMovementClock'event and paddleMovementClock = '1' then
						if leftPaddleY + leftPaddleDirection < paddleBottomLimit - paddleHalfHeight
						and leftPaddleY + leftPaddleDirection > paddleTopLimit + paddleHalfHeight then
						leftPaddleY <= leftPaddleY + leftPaddleDirection;
						end if;
					end if;
end process leftPaddleMovement;

rightPaddleMovement : process(paddleMovementClock)
begin
					if paddleMovementClock'event and paddleMovementClock = '1' then
						if rightPaddleY + rightPaddleDirection < paddleBottomLimit - paddleHalfHeight
						and rightPaddleY + rightPaddleDirection > paddleTopLimit + paddleHalfHeight then
						rightPaddleY <= rightPaddleY + rightPaddleDirection;
						end if;
					end if;
end process rightPaddleMovement;

ballMovement : process(ballMovementClock,gameOver)
begin
				if gameOver = '1' then
				ballX <= 319;
				ballY <= 239;
				ballSpeedX <= 0;
				ballSpeedY <= 0;
				elsif ballMovementClock'event and ballMovementClock='1' then
				if resetBall = '1' then
				if resetCounter = 100 then
				resetCounter <= 0;
				ballX <= 319;
				ballY <= 239;
				resetBall <= '0';
				else
				resetCounter <= resetCounter + 1;
				end if;
				else

				if ballX+4 > rightPaddleFrontX and ballX < rightPaddleBackX
				and ballY+4 > rightPaddleY-paddleHalfHeight and ballY-4 < rightPaddleY+paddleHalfHeight then
				ballX <= rightPaddleFrontX - 4;
				ballSpeedY <= (ballY - rightPaddleY) / 8;
				ballSpeedX <= -ballMaxSpeed + ballSpeedY;
				
				elsif ballX-4 < leftPaddleFrontX and ballX > leftPaddleBackX
				and ballY+4 > leftPaddleY-paddleHalfHeight and ballY-4 < leftPaddleY+paddleHalfHeight then
				ballX <= leftPaddleFrontX + 4;
				ballSpeedY <= ((ballY - leftPaddleY) / 8);
				ballSpeedX <= ballMaxSpeed - ballSpeedY;
				
				elsif ballX + ballSpeedX < 4 then
				leftLifes <= leftLifes - 1;
				ballX <= -20;
				ballY <= -20;
				resetBall <= '1';
				elsif ballX + ballSpeedX > 635 then
				rightLifes <= rightLifes - 1;
				ballX <= -20;
				ballY <= -20;
				resetBall <= '1';
				else
				ballX <= ballX + ballSpeedX;
				end if;

				if ballY > 470 then
				ballY <= 470;
				ballSpeedY <= -ballSpeedY;
				
				elsif ballY < 10 then
				ballY <= 10;
				ballSpeedY <= -ballSpeedY;
				
				else
				ballY <= ballY + ballSpeedY;
				end if;
				end if;
				end if;
				
end process ballMovement;

draw : process(photonX, photonY, halfClock)
begin
				if halfClock'event and halfClock = '1' then
					hsync_out <= hsyncEnable;
					vsync_out <= vsyncEnable;

					if (photonX < 640 and photonY < 480) then
						red_out <= color(2);
						green_out <= color(1);
						blue_out <= color(0);
					else
						red_out <= '0';
						green_out <= '0';
						blue_out <= '0';
					end if;
				end if;
end process draw;

entrees : process(entreeG,entreeD)
begin
		case entreeG is
			when "10" => leftPaddleDirection <= -1;
			when "01" => leftPaddleDirection <= 1;
			when others => leftPaddleDirection <= 0;
		end case;
		case entreeD is
			when "10" => rightPaddleDirection <= -1;
			when "01" => rightPaddleDirection <= 1;
			when others => rightPaddleDirection <= 0;
		end case;
end process entrees;

end Behavioral;